module frinx-cisco-if-extension {

  yang-version "1";

  // namespace
  namespace "http://frinx.openconfig.net/yang/interfaces/cisco";

  prefix "cisco-if-ext";

  // import some basic types
  import frinx-openconfig-interfaces { prefix oc-if; }
  // uniconfig imports
  import network-topology { prefix nt; revision-date "2013-10-21"; }
  import frinx-uniconfig-topology { prefix ut; revision-date "2017-11-21"; }
  import yang-ext { prefix ext; revision-date "2013-07-09"; }

  // meta
  organization "Frinx s.r.o";

  contact
    "support@frinx.io";

  description
    "Set of augments needed to OpenConfig interfaces models,
    containing CISCO specific features.";

  revision "2017-10-24" {
    description
      "Initial release";
    reference "3.1.1";
  }

  // grouping statements

  grouping cisco-if-extension-config {

    leaf port-type {
      type enumeration {
        enum eni {
          description
            "ENI port-type";
        }
        enum nni {
          description
            "NNI port-type";
        }
        enum uni {
          description
            "UNI port-type";
        }
      }
    }

    leaf snmp-trap-link-status {
      type boolean;
      description
        "Allow SNMP LINKUP and LINKDOWN traps";
    }

    leaf switchport-mode {
      type enumeration {
        enum trunk {
          description
            "Set trunking mode to TRUNK unconditionally";
        }
        enum access {
          description
            "Set trunking mode to ACCESS unconditionally";
        }
        enum dot1q-tunnel {
          description
            "Set trunking mode to TUNNEL unconditionally";
        }
      }
    }

    leaf switchport-access-vlan {
      type uint32 {
        range "1..4094";
      }
      description
        "VLAN ID of the VLAN when this port is in access mode";
    }

    leaf-list switchport-trunk-allowed-vlan-add {
      type uint32 {
        range "1 .. 4094";
      }
      description
        "VLAN IDs of the allowed VLANs when this port is in trunking mode";
    }

    leaf ip-redirects {
      type boolean;
      description
        "Enable sending ICMP Redirect messages";
    }

    leaf ip-unreachables {
      type boolean;
      description
        "Enable sending ICMP Unreachable messages";
    }

    leaf ip-proxy-arp {
      type boolean;
      description
        "Enable proxy ARP";
    }

    uses service-policy;
    uses storm-control;
  }

  grouping service-policy {
    container service-policy {
      leaf input {
        type string;
        description
          "Assign policy-map to the input of an interface";
      }

      leaf output {
        type string;
        description
          "Assign policy-map to the output of an interface";
      }
    }
  }

  grouping storm-control {
    list storm-control {
      key "address";
      ordered-by user;

      leaf address {
        type enumeration {
          enum broadcast {
            description
              "Broadcast address storm control";
          }
          enum multicast {
            description
              "Multicast address storm control";
          }
          enum unicast {
            description
              "Unicast address storm control";
          }
        }
        mandatory true;
      }

      leaf level {
        type decimal64 {
          fraction-digits 2;
          range "0 .. 100";
        }
        mandatory true;
        description
          "Rising threshold level (percentage)";
      }
    }
  }

  grouping statistics-config {
    leaf load-interval {
      type uint32 {
        range "0..600";
      }

      // default "300";

      description
        "Specify interval for load calculation for an
        interface.
        0 disables load calculation, otherwise some
        multiple of 30 between 30 and 600.";
    }
  }

  grouping statistics-state {
    description
      "Damping related operational state";

    //TODO: placeholder for operational state related to statistics
  }

  grouping statistics-top {
    description
      "Top-level grouping for statistics data";

    container statistics {
      description
        "Enclosing container for statistics interface-specific
        data.";

      container config {
          description "Configuration parameters for statistics";

          uses statistics-config;
      }

      container state {

        config false;
        description "State variables for statistics";

        uses statistics-config;
        uses statistics-state;
      }
    }
  }

  grouping rpf-check-top {
    leaf rpf-check {
      type enumeration {
        enum ANY {
          description "Source is reachable via any interface";
        }
        enum RX {
          description "Source is reachable via interface on which
                      packet was received";
        }
      }
    }
  }

  identity RPF_ALLOW_CONFIG_BASE {
    description "Base identity for RPF check config";
  }

  identity RPF_ALLOW_DEFAULT {
    base RPF_ALLOW_CONFIG_BASE;
    description "Base identity for RPF check config";
  }

  identity RPF_ALLOW_SELF_PING {
    base RPF_ALLOW_CONFIG_BASE;
    description "Base identity for RPF check config";
  }

  grouping allow-config-top {
    leaf-list allow-config {
      type identityref {
        base RPF_ALLOW_CONFIG_BASE;
      }
    }
  }

  grouping ipv4-verify {
    container ipv4 {
      uses rpf-check-top;
      uses allow-config-top;
    }

    description "Enables RPF check for ipv4 interface";
  }

  grouping ipv6-verify {
    container ipv6 {
      uses rpf-check-top;
      uses allow-config-top;
    }

    description "Enables RPF check for ipv6 interface";
  }

  grouping verify-unicast-source-reachable-via-top {
    container verify-unicast-source-reachable-via {
      uses ipv4-verify;
      uses ipv6-verify;
    }

    description "Enable per packet validation for unicast,
                reachability check applied to the source
                address";
  }

  // augment statements

  augment "/oc-if:interfaces/oc-if:interface" {
    ext:augment-identifier "if-cisco-stats-aug";
    description "Adds Cisco specific statistics configuration to
                interfaces model";

    uses statistics-top;
  }

  augment "/oc-if:interfaces/oc-if:interface/oc-if:config" {
    ext:augment-identifier "if-cisco-ext-aug";
    description "Adds Cisco specific statistics configuration to
                interfaces model";

    uses cisco-if-extension-config;
  }
  augment "/oc-if:interfaces/oc-if:interface" {
    description "Adds Reverse Path Forwarding (RPF) checking to
                interface model";

    uses verify-unicast-source-reachable-via-top;
  }

  augment "/oc-if:interfaces/oc-if:interface/oc-if:subinterfaces/" +
              "oc-if:subinterface" {
    ext:augment-identifier "if-subif-cisco-stats-aug";
    description "Adds Cisco specific statistics configuration to
                subinterfaces model";

    uses statistics-top;
  }

  augment "/oc-if:interfaces/oc-if:interface/oc-if:subinterfaces/" +
                "oc-if:subinterface/oc-if:config" {
    ext:augment-identifier "if-subif-cisco-ext-aug";
    description "Adds Cisco specific statistics configuration to
               subinterfaces model";

    uses cisco-if-extension-config;
  }

  augment "/oc-if:interfaces/oc-if:interface/oc-if:subinterfaces/" +
              "oc-if:subinterface" {
    ext:augment-identifier "if-subif-cisco-hold-time-aug";
    description "Adds Cisco specific hold-time configuration to
                subinterfaces model";

    uses oc-if:interface-phys-holdtime-top;
  }

  // uniconfig augmentations

  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface" {
    description "Adds Cisco specific statistics configuration to
                    interfaces model";

    uses statistics-top;
  }

  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface/oc-if:config" {
    description "Adds Cisco specific statistics configuration to
                    interfaces model";

    uses cisco-if-extension-config;
  }

  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface" {
    description "Adds Reverse Path Forwarding (RPF) checking to
                interface model";

    uses verify-unicast-source-reachable-via-top;
  }

  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface" +
              "/oc-if:subinterfaces/oc-if:subinterface"{
    description "Adds Cisco specific statistics configuration to
                subinterfaces model";

    uses statistics-top;
  }

  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface" +
              "/oc-if:subinterfaces/oc-if:subinterface/oc-if:config"{
    description "Adds Cisco specific statistics configuration to
                subinterfaces model";

    uses cisco-if-extension-config;
  }
  augment "/nt:network-topology/nt:topology/nt:node/ut:configuration/oc-if:interfaces/oc-if:interface" +
              "/oc-if:subinterfaces/oc-if:subinterface"{
    description "Adds Cisco specific hold-time configuration to
                subinterfaces model";

    uses oc-if:interface-phys-holdtime-top;
  }

}
